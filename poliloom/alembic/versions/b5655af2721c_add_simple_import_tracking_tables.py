"""Add simple import tracking tables

Revision ID: b5655af2721c
Revises: e5b6261690bf
Create Date: 2025-09-26 20:06:03.267421

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "b5655af2721c"
down_revision: Union[str, None] = "e5b6261690bf"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "current_import_statements",
        sa.Column("statement_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("statement_id"),
    )
    op.create_table(
        "current_import_entities",
        sa.Column("entity_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["entity_id"],
            ["wikidata_entities.wikidata_id"],
        ),
        sa.PrimaryKeyConstraint("entity_id"),
    )

    # Create simple tracking functions and triggers
    op.execute("""
        -- Function to track entity access during imports
        CREATE OR REPLACE FUNCTION track_entity_access()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Track entity access in simple tracking table
            INSERT INTO current_import_entities (entity_id)
            VALUES (NEW.wikidata_id)
            ON CONFLICT (entity_id) DO NOTHING;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        -- Function to track statement access during imports
        CREATE OR REPLACE FUNCTION track_statement_access()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Only track if statement_id exists
            IF NEW.statement_id IS NOT NULL THEN
                INSERT INTO current_import_statements (statement_id)
                VALUES (NEW.statement_id)
                ON CONFLICT (statement_id) DO NOTHING;
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Create triggers for entity tracking
    op.execute("""
        CREATE TRIGGER track_wikidata_entity_access
        AFTER INSERT OR UPDATE ON wikidata_entities
        FOR EACH ROW EXECUTE FUNCTION track_entity_access();
    """)

    # Create triggers for statement tracking
    op.execute("""
        CREATE TRIGGER track_property_access
        AFTER INSERT OR UPDATE ON properties
        FOR EACH ROW EXECUTE FUNCTION track_statement_access();
    """)

    op.execute("""
        CREATE TRIGGER track_relation_access
        AFTER INSERT OR UPDATE ON wikidata_relations
        FOR EACH ROW EXECUTE FUNCTION track_statement_access();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # Drop triggers first
    op.execute("DROP TRIGGER IF EXISTS track_relation_access ON wikidata_relations;")
    op.execute("DROP TRIGGER IF EXISTS track_property_access ON properties;")
    op.execute(
        "DROP TRIGGER IF EXISTS track_wikidata_entity_access ON wikidata_entities;"
    )

    # Drop functions
    op.execute("DROP FUNCTION IF EXISTS track_statement_access();")
    op.execute("DROP FUNCTION IF EXISTS track_entity_access();")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("current_import_entities")
    op.drop_table("current_import_statements")
    # ### end Alembic commands ###
