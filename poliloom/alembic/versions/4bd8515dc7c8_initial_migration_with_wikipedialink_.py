"""Initial migration with WikipediaLink model

Revision ID: 4bd8515dc7c8
Revises:
Create Date: 2025-07-09 22:16:46.883231

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = "4bd8515dc7c8"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "countries",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("iso_code", sa.String(), nullable=True),
        sa.Column("wikidata_id", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_countries_iso_code"), "countries", ["iso_code"], unique=True
    )
    op.create_index(
        op.f("ix_countries_wikidata_id"), "countries", ["wikidata_id"], unique=True
    )
    op.create_table(
        "locations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("wikidata_id", sa.String(), nullable=True),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_locations_wikidata_id"), "locations", ["wikidata_id"], unique=True
    )
    op.create_table(
        "politicians",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("wikidata_id", sa.String(), nullable=True),
        sa.Column("is_deceased", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_politicians_wikidata_id"), "politicians", ["wikidata_id"], unique=True
    )
    op.create_table(
        "positions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("wikidata_id", sa.String(), nullable=True),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_positions_wikidata_id"), "positions", ["wikidata_id"], unique=True
    )
    op.create_table(
        "born_at",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("politician_id", sa.UUID(), nullable=False),
        sa.Column("location_id", sa.UUID(), nullable=False),
        sa.Column("is_extracted", sa.Boolean(), nullable=True),
        sa.Column("confirmed_by", sa.String(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["politician_id"],
            ["politicians.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "has_citizenship",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("politician_id", sa.UUID(), nullable=False),
        sa.Column("country_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.id"],
        ),
        sa.ForeignKeyConstraint(
            ["politician_id"],
            ["politicians.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "holds_position",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("politician_id", sa.UUID(), nullable=False),
        sa.Column("position_id", sa.UUID(), nullable=False),
        sa.Column("start_date", sa.String(), nullable=True),
        sa.Column("end_date", sa.String(), nullable=True),
        sa.Column("is_extracted", sa.Boolean(), nullable=True),
        sa.Column("confirmed_by", sa.String(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["politician_id"],
            ["politicians.id"],
        ),
        sa.ForeignKeyConstraint(
            ["position_id"],
            ["positions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "properties",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("politician_id", sa.UUID(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("is_extracted", sa.Boolean(), nullable=True),
        sa.Column("confirmed_by", sa.String(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["politician_id"],
            ["politicians.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "wikipedia_links",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("politician_id", sa.UUID(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("language_code", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["politician_id"],
            ["politicians.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("wikipedia_links")
    op.drop_table("properties")
    op.drop_table("holds_position")
    op.drop_table("has_citizenship")
    op.drop_table("born_at")
    op.drop_index(op.f("ix_positions_wikidata_id"), table_name="positions")
    op.drop_table("positions")
    op.drop_index(op.f("ix_politicians_wikidata_id"), table_name="politicians")
    op.drop_table("politicians")
    op.drop_index(op.f("ix_locations_wikidata_id"), table_name="locations")
    op.drop_table("locations")
    op.drop_index(op.f("ix_countries_wikidata_id"), table_name="countries")
    op.drop_index(op.f("ix_countries_iso_code"), table_name="countries")
    op.drop_table("countries")
    # ### end Alembic commands ###
